<?php

namespace Tests\Feature;

use App\Models\User;
use App\Services\AuthService;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class AuthControllerTest extends TestCase
{
    use DatabaseMigrations;
    private AuthService $authService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->authService = app(AuthService::class);
    }

    public function test_register_user(): void
    {
        $requestedData = [
            'name' => 'John Doe',
            'email' => 'john.doe@mail.com',
            'password' => Hash::make('password')
        ];

        $response = $this->postJson('/api/register',$requestedData);

        $responseData = $response->json();
        $this->assertArrayHasKey('access_token',$responseData);
        $token = $responseData['access_token'];
        $this->assertNotEmpty($token);

        $user = User::where('email',$requestedData['email'])->first();
        $this->assertNotNull($user);
    }

    public function test_login_with_valid_credentials()
    {
        $user = User::factory(User::class)->create([
            'email' => 'test.example@mail.com',
            'password' => Hash::make('password')
        ]);

        $response = $this->postJson('/api/login',[
            'email' => 'test.example@mail.com',
            'password' => 'password'
        ]);

        $response->assertJson([
            'success' => true,
            'message' => 'User is logged in!',
        ]);
        $response->assertStatus(200);

        $responseData = $response->json();
        $this->assertArrayHasKey('access_token',$responseData);
        $token = $responseData['access_token'];
        $this->assertNotEmpty($token);

    }
}
